/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/bindings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List bindings
     * @description List bindings that match the request.
     */
    get: operations["BindingsList"];
    put?: never;
    /**
     * Create binding
     * @description Create a new binding.
     */
    post: operations["BindingsCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bindings/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get binding
     * @description Get a binding by ID.
     */
    get: operations["BindingsIdGet"];
    put?: never;
    post?: never;
    /**
     * Delete binding
     * @description Delete a binding by ID.
     */
    delete: operations["BindingsIdDelete"];
    options?: never;
    head?: never;
    /**
     * Update binding
     * @description Update a binding by ID.
     */
    patch: operations["BindingsIdUpdate"];
    trace?: never;
  };
  "/media": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List media
     * @description List media that match the request.
     */
    get: operations["MediaList"];
    put?: never;
    /**
     * Create media
     * @description Create new media.
     */
    post: operations["MediaCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get media
     * @description Get media by ID.
     */
    get: operations["MediaIdGet"];
    put?: never;
    post?: never;
    /**
     * Delete media
     * @description Delete media by ID.
     */
    delete: operations["MediaIdDelete"];
    options?: never;
    head?: never;
    /**
     * Update media
     * @description Update media by ID.
     */
    patch: operations["MediaIdUpdate"];
    trace?: never;
  };
  "/media/{id}/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download media content
     * @description Download media content by ID.
     */
    get: operations["MediaIdContentDownload"];
    /**
     * Upload media content
     * @description Upload media content by ID.
     */
    put: operations["MediaIdContentUpload"];
    post?: never;
    delete?: never;
    options?: never;
    /**
     * Get media content headers
     * @description Get media content headers by ID.
     */
    head: operations["MediaIdContentHeaddownload"];
    patch?: never;
    trace?: never;
  };
  "/ping": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Ping
     * @description Ping.
     */
    get: operations["PingPing"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    /**
     * Ping headers
     * @description Ping headers.
     */
    head: operations["PingHeadping"];
    patch?: never;
    trace?: never;
  };
  "/playlists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List playlists
     * @description List playlists that match the request.
     */
    get: operations["PlaylistsList"];
    put?: never;
    /**
     * Create playlist
     * @description Create a new playlist.
     */
    post: operations["PlaylistsCreate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/playlists/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get playlist
     * @description Get a playlist by ID.
     */
    get: operations["PlaylistsIdGet"];
    put?: never;
    post?: never;
    /**
     * Delete playlist
     * @description Delete a playlist by ID.
     */
    delete: operations["PlaylistsIdDelete"];
    options?: never;
    head?: never;
    /**
     * Update playlist
     * @description Update a playlist by ID.
     */
    patch: operations["PlaylistsIdUpdate"];
    trace?: never;
  };
  "/playlists/{id}/m3u": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get playlist in M3U format
     * @description Get a playlist in M3U format.
     */
    get: operations["PlaylistsIdM3UM3U"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    /**
     * Get headers for playlist in M3U format
     * @description Get headers for a playlist in M3U format.
     */
    head: operations["PlaylistsIdM3UHeadm3U"];
    patch?: never;
    trace?: never;
  };
  "/sse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get SSE stream
     * @description Get a stream of Server-Sent Events.
     */
    get: operations["SseSubscribe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * BindingCreateInput
     * @description Data to create a binding.
     */
    BindingCreateInput: {
      id?: string;
      playlistId: string;
      mediaId: string;
      rank: string;
    };
    /** BindingList */
    BindingList: {
      /** @description Total number of bindings that matched the query. */
      count: number;
      /** @description Maximum number of returned bindings. */
      limit?: null | number;
      /** @description Number of bindings skipped. */
      offset?: null | number;
      /** @description Bindings that matched the request. */
      bindings: components["schemas"]["bindings_models_Binding"][];
    };
    /**
     * BindingUpdateInput
     * @description Data to update a binding.
     */
    BindingUpdateInput: {
      id?: string;
      rank?: string;
    };
    /**
     * MediaCreateInput
     * @description Data to create media.
     */
    MediaCreateInput: {
      id?: string;
      name: string;
    };
    /** MediaList */
    MediaList: {
      /** @description Total number of media that matched the query. */
      count: number;
      /** @description Maximum number of returned media. */
      limit?: null | number;
      /** @description Number of media skipped. */
      offset?: null | number;
      /** @description Media that matched the request. */
      media: components["schemas"]["media_models_Media"][];
    };
    /**
     * MediaUpdateInput
     * @description Data to update media.
     */
    MediaUpdateInput: {
      id?: string;
      name?: string;
    };
    /**
     * PlaylistCreateInput
     * @description Data to create a playlist.
     */
    PlaylistCreateInput: {
      id?: string;
      name: string;
    };
    /** PlaylistList */
    PlaylistList: {
      /** @description Total number of playlists that matched the query. */
      count: number;
      /** @description Maximum number of returned playlists. */
      limit?: null | number;
      /** @description Number of playlists skipped. */
      offset?: null | number;
      /** @description Playlists that matched the request. */
      playlists: components["schemas"]["playlists_models_Playlist"][];
    };
    /**
     * PlaylistUpdateInput
     * @description Data to update a playlist.
     */
    PlaylistUpdateInput: {
      id?: string;
      name?: string;
    };
    /** Binding */
    bindings_models_Binding: {
      /**
       * Format: uuid
       * @description Identifier of the binding.
       */
      id: string;
      /**
       * Format: uuid
       * @description Identifier of the playlist that the binding belongs to.
       */
      playlistId: string;
      /**
       * Format: uuid
       * @description Identifier of the media that the binding belongs to.
       */
      mediaId: string;
      /** @description Rank of the media in the binding. */
      rank: string;
      /** @description Playlist that the binding belongs to. */
      playlist?: null | components["schemas"]["bindings_models_Playlist"];
      /** @description Media that the binding belongs to. */
      media?: null | components["schemas"]["bindings_models_Media"];
    };
    /** Media */
    bindings_models_Media: {
      /**
       * Format: uuid
       * @description Identifier of the media.
       */
      id: string;
      /** @description Name of the media. */
      name: string;
      /** @description Bindings that the media belongs to. */
      bindings?: null | components["schemas"]["bindings_models_Binding"][];
    };
    /** Playlist */
    bindings_models_Playlist: {
      /**
       * Format: uuid
       * @description Identifier of the playlist.
       */
      id: string;
      /** @description Name of the playlist. */
      name: string;
      /** @description Bindings that the playlist belongs to. */
      bindings?: null | components["schemas"]["bindings_models_Binding"][];
    };
    /** Binding */
    media_models_Binding: {
      /**
       * Format: uuid
       * @description Identifier of the binding.
       */
      id: string;
      /**
       * Format: uuid
       * @description Identifier of the playlist that the binding belongs to.
       */
      playlistId: string;
      /**
       * Format: uuid
       * @description Identifier of the media that the binding belongs to.
       */
      mediaId: string;
      /** @description Rank of the media in the binding. */
      rank: string;
      /** @description Playlist that the binding belongs to. */
      playlist?: null | components["schemas"]["media_models_Playlist"];
      /** @description Media that the binding belongs to. */
      media?: null | components["schemas"]["media_models_Media"];
    };
    /** Media */
    media_models_Media: {
      /**
       * Format: uuid
       * @description Identifier of the media.
       */
      id: string;
      /** @description Name of the media. */
      name: string;
      /** @description Bindings that the media belongs to. */
      bindings?: null | components["schemas"]["media_models_Binding"][];
    };
    /** Playlist */
    media_models_Playlist: {
      /**
       * Format: uuid
       * @description Identifier of the playlist.
       */
      id: string;
      /** @description Name of the playlist. */
      name: string;
      /** @description Bindings that the playlist belongs to. */
      bindings?: null | components["schemas"]["media_models_Binding"][];
    };
    /** Binding */
    playlists_models_Binding: {
      /**
       * Format: uuid
       * @description Identifier of the binding.
       */
      id: string;
      /**
       * Format: uuid
       * @description Identifier of the playlist that the binding belongs to.
       */
      playlistId: string;
      /**
       * Format: uuid
       * @description Identifier of the media that the binding belongs to.
       */
      mediaId: string;
      /** @description Rank of the media in the binding. */
      rank: string;
      /** @description Playlist that the binding belongs to. */
      playlist?: null | components["schemas"]["playlists_models_Playlist"];
      /** @description Media that the binding belongs to. */
      media?: null | components["schemas"]["playlists_models_Media"];
    };
    /** Media */
    playlists_models_Media: {
      /**
       * Format: uuid
       * @description Identifier of the media.
       */
      id: string;
      /** @description Name of the media. */
      name: string;
      /** @description Bindings that the media belongs to. */
      bindings?: null | components["schemas"]["playlists_models_Binding"][];
    };
    /** Playlist */
    playlists_models_Playlist: {
      /**
       * Format: uuid
       * @description Identifier of the playlist.
       */
      id: string;
      /** @description Name of the playlist. */
      name: string;
      /** @description Bindings that the playlist belongs to. */
      bindings?: null | components["schemas"]["playlists_models_Binding"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  BindingsList: {
    parameters: {
      query?: {
        /** @description Maximum number of bindings to return. */
        limit?: null | number;
        /** @description Number of bindings to skip. */
        offset?: null | number;
        /** @description Filter to apply to find bindings. */
        where?: null | string;
        /** @description Relations to include in the response. */
        include?: null | string;
        /** @description Order to apply to the results. */
        order?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BindingList"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  BindingsCreate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BindingCreateInput"];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["bindings_models_Binding"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  BindingsIdGet: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the binding to get. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["bindings_models_Binding"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  BindingsIdDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the binding to delete. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  BindingsIdUpdate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the binding to update. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BindingUpdateInput"];
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["bindings_models_Binding"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaList: {
    parameters: {
      query?: {
        /** @description Maximum number of media to return. */
        limit?: null | number;
        /** @description Number of media to skip. */
        offset?: null | number;
        /** @description Filter to apply to find media. */
        where?: null | string;
        /** @description Relations to include in the response. */
        include?: null | string;
        /** @description Order to apply to the results. */
        order?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MediaList"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaCreate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MediaCreateInput"];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["media_models_Media"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdGet: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the media to get. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["media_models_Media"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the media to delete. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdUpdate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the media to update. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MediaUpdateInput"];
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["media_models_Media"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdContentDownload: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the media to download content for. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stream Response */
      200: {
        headers: {
          /** @description File size in bytes */
          "content-length"?: string;
          /** @description Last modified data-time in RFC 2822 format */
          "last-modified"?: string;
          /** @description Entity tag */
          etag?: string;
          /** @description Last modified. */
          "Last-Modified"?: unknown;
          /** @description Content length. */
          "Content-Length"?: unknown;
          /** @description Entity tag. */
          ETag?: unknown;
          /** @description Content type. */
          "Content-Type"?: unknown;
          [name: string]: unknown;
        };
        content: {
          "": string;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdContentUpload: {
    parameters: {
      query?: never;
      header: {
        /** @description Content type. */
        "Content-Type": string;
      };
      path: {
        /** @description Identifier of the media to upload content for. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  MediaIdContentHeaddownload: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the media to get content headers for. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description Last modified. */
          "Last-Modified"?: unknown;
          /** @description Content length. */
          "Content-Length"?: unknown;
          /** @description Entity tag. */
          ETag?: unknown;
          /** @description Content type. */
          "Content-Type"?: unknown;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PingPing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  PingHeadping: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  PlaylistsList: {
    parameters: {
      query?: {
        /** @description Maximum number of playlists to return. */
        limit?: null | number;
        /** @description Number of playlists to skip. */
        offset?: null | number;
        /** @description Filter to apply to find playlists. */
        where?: null | string;
        /** @description Relations to include in the response. */
        include?: null | string;
        /** @description Order to apply to the results. */
        order?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PlaylistList"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsCreate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlaylistCreateInput"];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["playlists_models_Playlist"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsIdGet: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the playlist to get. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["playlists_models_Playlist"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsIdDelete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the playlist to delete. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsIdUpdate: {
    parameters: {
      query?: {
        /** @description Relations to include in the response. */
        include?: null | string;
      };
      header?: never;
      path: {
        /** @description Identifier of the playlist to update. */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlaylistUpdateInput"];
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["playlists_models_Playlist"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsIdM3UM3U: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the playlist to get. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description Content type. */
          "Content-Type"?: string;
          [name: string]: unknown;
        };
        content: {
          "audio/mpegurl": string;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PlaylistsIdM3UHeadm3U: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Identifier of the playlist to get. */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description Content type. */
          "Content-Type"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  SseSubscribe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description File size in bytes */
          "content-length"?: string;
          /** @description Last modified data-time in RFC 2822 format */
          "last-modified"?: string;
          /** @description Entity tag */
          etag?: string;
          [name: string]: unknown;
        };
        content: {
          "": string;
        };
      };
    };
  };
}
